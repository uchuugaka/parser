#ifndef YM_MVN_MVNPIN_H
#define YM_MVN_MVNPIN_H

/// @file ym_mvn/MvnPin.h
/// @brief MvnInputPin/MvnOutputPin のヘッダファイル
/// @author Yusuke Matsunaga (松永 裕介)
///
/// Copyright (C) 2005-2010 Yusuke Matsunaga
/// All rights reserved.


#include "ym_mvn/mvn_nsdef.h"


BEGIN_NAMESPACE_YM_MVN

//////////////////////////////////////////////////////////////////////
/// @class MvPin MvPin.h "ym_mvn/MvPin.h"
/// @brief ノードのピンを表す基底クラス
//////////////////////////////////////////////////////////////////////
class MvPin
{
public:

  /// @brief ビット幅を得る．
  ymuint
  bit_width() const;

  /// @brief ノードの何番目のピンかを返す．
  /// @note 入力ピンと出力ピンは区別される．
  ymuint
  pos() const;


protected:
  //////////////////////////////////////////////////////////////////////
  // コンストラクタ / デストラクタ
  //////////////////////////////////////////////////////////////////////

  /// @brief コンストラクタ
  MvPin();

  /// @brief デストラクタ
  ~MvPin();


private:
  //////////////////////////////////////////////////////////////////////
  // データメンバ
  //////////////////////////////////////////////////////////////////////

  // ビット幅
  ymuint32 mBitWidth;

  // 位置
  ymuint32 mPos;

};


//////////////////////////////////////////////////////////////////////
/// @class MvInputPin MvPin.h "ym_mvn/MvPin.h"
/// @brief ノードの入力ピンを表すクラス
//////////////////////////////////////////////////////////////////////
class MvInputPin :
  public MvPin
{
  friend class MvNode;

public:

  /// @brief 接続しているネットを得る．
  MvNet*
  net() const;


private:
  //////////////////////////////////////////////////////////////////////
  // コンストラクタ / デストラクタ
  //////////////////////////////////////////////////////////////////////

  /// @brief コンストラクタ
  MvInputPin();

  /// @brief デストラクタ
  ~MvInputPin();


private:
  //////////////////////////////////////////////////////////////////////
  // データメンバ
  //////////////////////////////////////////////////////////////////////

  // 接続しているネット
  MvNet* mNet;

};


//////////////////////////////////////////////////////////////////////
/// @class MvOutputPin MvPin.h "ym_mvn/MvPin.h"
/// @brief ノードの出力ピンを表すクラス
//////////////////////////////////////////////////////////////////////
class MvOutputPin :
  public MvPin
{
  friend class MvNode;

public:

  /// @brief 接続しているネットのリストを得る．
  const MvNetList&
  net_list() const;


private:
  //////////////////////////////////////////////////////////////////////
  // コンストラクタ / デストラクタ
  //////////////////////////////////////////////////////////////////////

  /// @brief コンストラクタ
  MvOutputPin();

  /// @brief デストラクタ
  ~MvOutputPin();


private:
  //////////////////////////////////////////////////////////////////////
  // データメンバ
  //////////////////////////////////////////////////////////////////////

  // 接続しているネットのリスト
  MvNetList mNetList;

};


//////////////////////////////////////////////////////////////////////
// インライン関数の定義
//////////////////////////////////////////////////////////////////////

// @brief ビット幅を得る．
inline
ymuint
MvPin::bit_width() const
{
  return mBitWidth;
}

// @brief ノードの何番目のピンかを返す．
// @note 入力ピンと出力ピンは区別される．
inline
ymuint
MvPin::pos() const
{
  return mPos;
}

// @brief 接続しているネットを得る．
inline
MvNet*
MvInputPin::net() const
{
  return mNet;
}

// @brief 接続しているネットのリストを得る．
inline
const MvNetList&
MvOutputPin::net_list() const
{
  return mNetList;
}

END_NAMESPACE_YM_MVN

#endif // YM_MVN_MVNPIN_H
