#ifndef OBJHANDLEIMPL_H
#define OBJHANDLEIMPL_H

/// @file IrHandleImpl.h
/// @brief ObjHandle のヘッダファイル
/// @author Yusuke Matsunaga (松永 裕介)
///
/// Copyright (C) 2014 Yusuke Matsunaga
/// All rights reserved.


#include "IrHandle.h"


BEGIN_NAMESPACE_YM_YMSL

//////////////////////////////////////////////////////////////////////
/// @class VarHandle IrHandleImpl.h "IrHandleImpl.h"
/// @brief IrVar を保持する IrHandle
//////////////////////////////////////////////////////////////////////
class VarHandle :
  public IrHandle
{
public:

  /// @brief コンストラクタ
  /// @param[in] var 変数
  VarHandle(IrVar* var);

  /// @brief デストラクタ
  virtual
  ~VarHandle();


public:
  //////////////////////////////////////////////////////////////////////
  // 外部インターフェイス
  //////////////////////////////////////////////////////////////////////

  /// @brief 名前を返す．
  virtual
  ShString
  name() const;

  /// @brief 変数を返す．
  ///
  /// 他の要素の場合には NULL を返す．
  virtual
  IrVar*
  var() const;


private:
  //////////////////////////////////////////////////////////////////////
  // データメンバ
  //////////////////////////////////////////////////////////////////////

  // 変数
  IrVar* mVar;

};


//////////////////////////////////////////////////////////////////////
/// @class FuncHandle IrHandleImpl.h "IrHandleImpl.h"
/// @brief IrFunction を保持する IrHandle
//////////////////////////////////////////////////////////////////////
class FuncHandle :
  public IrHandle
{
public:

  /// @brief コンストラクタ
  /// @param[in] func 関数
  FuncHandle(IrFunction* func);

  /// @brief デストラクタ
  virtual
  ~FuncHandle();


public:
  //////////////////////////////////////////////////////////////////////
  // 外部インターフェイス
  //////////////////////////////////////////////////////////////////////

  /// @brief 名前を返す．
  virtual
  ShString
  name() const;

  /// @brief 関数を返す．
  ///
  /// 他の要素の場合には NULL を返す．
  virtual
  IrFunction*
  function() const;


private:
  //////////////////////////////////////////////////////////////////////
  // データメンバ
  //////////////////////////////////////////////////////////////////////

  // 関数
  IrFunction* mFunc;

};


//////////////////////////////////////////////////////////////////////
/// @class LabelHandle IrHandleImpl.h "IrHandleImpl.h"
/// @brief IrLabel を保持する IrHandle
//////////////////////////////////////////////////////////////////////
class LabelHandle :
  public IrHandle
{
public:

  /// @brief コンストラクタ
  /// @param[in] statement ラベルすてーとめんと
  LabelHandle(IrLabel* statement);

  /// @brief デストラクタ
  virtual
  ~LabelHandle();


public:
  //////////////////////////////////////////////////////////////////////
  // 外部インターフェイス
  //////////////////////////////////////////////////////////////////////

  /// @brief 名前を返す．
  virtual
  ShString
  name() const;

  /// @brief ラベルを返す．
  ///
  /// 他の要素の場合には NULL を返す．
  virtual
  IrLabel*
  label() const;


private:
  //////////////////////////////////////////////////////////////////////
  // データメンバ
  //////////////////////////////////////////////////////////////////////

  // ラベル
  IrLabel* mLabel;

};


//////////////////////////////////////////////////////////////////////
/// @class ScopeHandle IrHandleImpl.h "IrHandleImpl.h"
/// @brief IrScope を保持する IrHandle
//////////////////////////////////////////////////////////////////////
class ScopeHandle :
  public IrHandle
{
public:

  /// @brief コンストラクタ
  /// @param[in] scope スコープ
  ScopeHandle(IrScope* scope);

  /// @brief デストラクタ
  virtual
  ~ScopeHandle();


public:
  //////////////////////////////////////////////////////////////////////
  // 外部インターフェイス
  //////////////////////////////////////////////////////////////////////

  /// @brief 名前を返す．
  virtual
  ShString
  name() const;

  /// @brief 名前空間を返す．
  ///
  /// 他の要素の場合には NULL を返す．
  virtual
  IrScope*
  scope() const;


private:
  //////////////////////////////////////////////////////////////////////
  // データメンバ
  //////////////////////////////////////////////////////////////////////

  // スコープ
  IrScope* mScope;

};


//////////////////////////////////////////////////////////////////////
/// @class TypeHandle IrHandleImpl.h "IrHandleImpl.h"
/// @brief IrType を保持する IrHandle
//////////////////////////////////////////////////////////////////////
class TypeHandle :
  public IrHandle
{
public:

  /// @brief コンストラクタ
  /// @param[in] type 型
  TypeHandle(IrType* type);

  /// @brief デストラクタ
  virtual
  ~TypeHandle();


public:
  //////////////////////////////////////////////////////////////////////
  // 外部インターフェイス
  //////////////////////////////////////////////////////////////////////

  /// @brief 名前を返す．
  virtual
  ShString
  name() const;

  /// @brief 名前付き型を返す．
  ///
  /// 他の要素の場合には NULL を返す．
  virtual
  IrType*
  named_type() const;


private:
  //////////////////////////////////////////////////////////////////////
  // データメンバ
  //////////////////////////////////////////////////////////////////////

  // 型
  IrType* mType;

};

END_NAMESPACE_YM_YMSL

#endif // OBJHANDLEIMPL_H
