#ifndef OBJHANDLEIMPL_H
#define OBJHANDLEIMPL_H

/// @file ObjHandle.h
/// @brief ObjHandle のヘッダファイル
/// @author Yusuke Matsunaga (松永 裕介)
///
/// Copyright (C) 2014 Yusuke Matsunaga
/// All rights reserved.


#include "ObjHandle.h"


BEGIN_NAMESPACE_YM_YMSL

//////////////////////////////////////////////////////////////////////
/// @class VarHandle ObjHandle.h "ObjHandle.h"
/// @brief YmslVar を保持する ObjHandle
//////////////////////////////////////////////////////////////////////
class VarHandle :
  public ObjHandle
{
public:

  /// @brief コンストラクタ
  /// @param[in] var 変数
  VarHandle(YmslVar* var);

  /// @brief デストラクタ
  virtual
  ~VarHandle();


public:
  //////////////////////////////////////////////////////////////////////
  // 外部インターフェイス
  //////////////////////////////////////////////////////////////////////

  /// @brief 名前を返す．
  virtual
  ShString
  name() const;

  /// @brief 変数を返す．
  ///
  /// 他の要素の場合には NULL を返す．
  virtual
  YmslVar*
  var() const;


private:
  //////////////////////////////////////////////////////////////////////
  // データメンバ
  //////////////////////////////////////////////////////////////////////

  // 変数
  YmslVar* mVar;

};


//////////////////////////////////////////////////////////////////////
/// @class FuncHandle ObjHandle.h "ObjHandle.h"
/// @brief YmslFunction を保持する ObjHandle
//////////////////////////////////////////////////////////////////////
class FuncHandle :
  public ObjHandle
{
public:

  /// @brief コンストラクタ
  /// @param[in] func 関数
  FuncHandle(YmslFunction* func);

  /// @brief デストラクタ
  virtual
  ~FuncHandle();


public:
  //////////////////////////////////////////////////////////////////////
  // 外部インターフェイス
  //////////////////////////////////////////////////////////////////////

  /// @brief 名前を返す．
  virtual
  ShString
  name() const;

  /// @brief 関数を返す．
  ///
  /// 他の要素の場合には NULL を返す．
  virtual
  YmslFunction*
  function() const;


private:
  //////////////////////////////////////////////////////////////////////
  // データメンバ
  //////////////////////////////////////////////////////////////////////

  // 関数
  YmslFunction* mFunc;

};


//////////////////////////////////////////////////////////////////////
/// @class LabelHandle ObjHandle.h "ObjHandle.h"
/// @brief YmslLabel を保持する ObjHandle
//////////////////////////////////////////////////////////////////////
class LabelHandle :
  public ObjHandle
{
public:

  /// @brief コンストラクタ
  /// @param[in] statement ラベルすてーとめんと
  LabelHandle(YmslLabel* statement);

  /// @brief デストラクタ
  virtual
  ~LabelHandle();


public:
  //////////////////////////////////////////////////////////////////////
  // 外部インターフェイス
  //////////////////////////////////////////////////////////////////////

  /// @brief 名前を返す．
  virtual
  ShString
  name() const;

  /// @brief ラベルを返す．
  ///
  /// 他の要素の場合には NULL を返す．
  virtual
  YmslLabel*
  label() const;


private:
  //////////////////////////////////////////////////////////////////////
  // データメンバ
  //////////////////////////////////////////////////////////////////////

  // ラベル
  YmslLabel* mLabel;

};


//////////////////////////////////////////////////////////////////////
/// @class ScopeHandle ObjHandle.h "ObjHandle.h"
/// @brief YmslScope を保持する ObjHandle
//////////////////////////////////////////////////////////////////////
class ScopeHandle :
  public ObjHandle
{
public:

  /// @brief コンストラクタ
  /// @param[in] scope スコープ
  ScopeHandle(YmslScope* scope);

  /// @brief デストラクタ
  virtual
  ~ScopeHandle();


public:
  //////////////////////////////////////////////////////////////////////
  // 外部インターフェイス
  //////////////////////////////////////////////////////////////////////

  /// @brief 名前を返す．
  virtual
  ShString
  name() const;

  /// @brief 名前空間を返す．
  ///
  /// 他の要素の場合には NULL を返す．
  virtual
  YmslScope*
  scope() const;


private:
  //////////////////////////////////////////////////////////////////////
  // データメンバ
  //////////////////////////////////////////////////////////////////////

  // スコープ
  YmslScope* mScope;

};


//////////////////////////////////////////////////////////////////////
/// @class EnumHandle ObjHandle.h "ObjHandle.h"
/// @brief YmslEnum を保持する ObjHandle
//////////////////////////////////////////////////////////////////////
class EnumHandle :
  public ObjHandle
{
public:

  /// @brief コンストラクタ
  /// @param[in] enum_type enum 型
  EnumHandle(YmslEnumType* enum_type);

  /// @brief デストラクタ
  virtual
  ~EnumHandle();


public:
  //////////////////////////////////////////////////////////////////////
  // 外部インターフェイス
  //////////////////////////////////////////////////////////////////////

  /// @brief 名前を返す．
  virtual
  ShString
  name() const;

  /// @brief enum 型を返す．
  ///
  /// 他の要素の場合には NULL を返す．
  virtual
  YmslEnumType*
  enum_type() const;


private:
  //////////////////////////////////////////////////////////////////////
  // データメンバ
  //////////////////////////////////////////////////////////////////////

  // enum 型
  YmslEnumType* mEnum;

};

END_NAMESPACE_YM_YMSL

#endif // OBJHANDLEIMPL_H
