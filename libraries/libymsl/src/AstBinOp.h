#ifndef ASTBINOP_H
#define ASTBINOP_H

/// @file AstBinOp.h
/// @brief AstBinOp のヘッダファイル
/// @author Yusuke Matsunaga (松永 裕介)
///
/// Copyright (C) 2014 Yusuke Matsunaga
/// All rights reserved.


#include "AstExpr.h"


BEGIN_NAMESPACE_YM_YMSL

//////////////////////////////////////////////////////////////////////
/// @ckass AstBinOp AstBinOp.h "AstBinOp.h"
/// @brief 二項演算子を表す AstExpr
//////////////////////////////////////////////////////////////////////
class AstBinOp :
  public AstExpr
{
public:

  /// @breif コンストラクタ
  /// @param[in] left, right オペランド
  AstBinOp(AstExpr* left,
	   AstExpr* right);

  /// @brief デストラクタ
  virtual
  ~AstBinOp();


public:
  //////////////////////////////////////////////////////////////////////
  // 外部インターフェイス
  //////////////////////////////////////////////////////////////////////

  /// @brief 内容を表示する．(デバッグ用)
  /// @param[in] s 出力ストリーム
  /// @param[in] indent インデントレベル
  virtual
  void
  print(ostream& s,
	ymuint indent = 0) const;


private:
  //////////////////////////////////////////////////////////////////////
  // データメンバ
  //////////////////////////////////////////////////////////////////////

  // オペランド
  AstExpr* mOpr[2];

};


//////////////////////////////////////////////////////////////////////
/// @class AstPlus AstBinOp.h "AstBinOp.h"
/// @brief 加算を表す Ast
//////////////////////////////////////////////////////////////////////
class AstPlus :
  public AstBinOp
{
public:

  /// @brief コンストラクタ
  /// @param[in] left, right オペランド
  AstPlus(AstExpr* left,
	  AstExpr* right);

  /// @brief デストラクタ
  virtual
  ~AstPlus();


public:
  //////////////////////////////////////////////////////////////////////
  // 外部インターフェイス
  //////////////////////////////////////////////////////////////////////

  /// @brief 型を得る．
  virtual
  AstType
  type() const;

};


//////////////////////////////////////////////////////////////////////
/// @class AstMinus AstBinOp.h "AstBinOp.h"
/// @brief 減算を表す Ast
//////////////////////////////////////////////////////////////////////
class AstMinus :
  public AstBinOp
{
public:

  /// @brief コンストラクタ
  /// @param[in] left, right オペランド
  AstMinus(AstExpr* left,
	   AstExpr* right);

  /// @brief デストラクタ
  virtual
  ~AstMinus();


public:
  //////////////////////////////////////////////////////////////////////
  // 外部インターフェイス
  //////////////////////////////////////////////////////////////////////

  /// @brief 型を得る．
  virtual
  AstType
  type() const;

};


//////////////////////////////////////////////////////////////////////
/// @class AstMult AstBinOp.h "AstBinOp.h"
/// @brief 乗算を表す Ast
//////////////////////////////////////////////////////////////////////
class AstMult :
  public AstBinOp
{
public:

  /// @brief コンストラクタ
  /// @param[in] left, right オペランド
  AstMult(AstExpr* left,
	  AstExpr* right);

  /// @brief デストラクタ
  virtual
  ~AstMult();


public:
  //////////////////////////////////////////////////////////////////////
  // 外部インターフェイス
  //////////////////////////////////////////////////////////////////////

  /// @brief 型を得る．
  virtual
  AstType
  type() const;

};


//////////////////////////////////////////////////////////////////////
/// @class AstDiv AstBinOp.h "AstBinOp.h"
/// @brief 除算を表す Ast
//////////////////////////////////////////////////////////////////////
class AstDiv :
  public AstBinOp
{
public:

  /// @brief コンストラクタ
  /// @param[in] left, right オペランド
  AstDiv(AstExpr* left,
	 AstExpr* right);

  /// @brief デストラクタ
  virtual
  ~AstDiv();


public:
  //////////////////////////////////////////////////////////////////////
  // 外部インターフェイス
  //////////////////////////////////////////////////////////////////////

  /// @brief 型を得る．
  virtual
  AstType
  type() const;

};


//////////////////////////////////////////////////////////////////////
/// @class AstMod AstBinOp.h "AstBinOp.h"
/// @brief 剰余を表す Ast
//////////////////////////////////////////////////////////////////////
class AstMod :
  public AstBinOp
{
public:

  /// @brief コンストラクタ
  /// @param[in] left, right オペランド
  AstMod(AstExpr* left,
	 AstExpr* right);

  /// @brief デストラクタ
  virtual
  ~AstMod();


public:
  //////////////////////////////////////////////////////////////////////
  // 外部インターフェイス
  //////////////////////////////////////////////////////////////////////

  /// @brief 型を得る．
  virtual
  AstType
  type() const;

};


//////////////////////////////////////////////////////////////////////
/// @class AstBitAnd AstBinOp.h "AstBinOp.h"
/// @brief ビットANDを表す Ast
//////////////////////////////////////////////////////////////////////
class AstBitAnd :
  public AstBinOp
{
public:

  /// @brief コンストラクタ
  /// @param[in] left, right オペランド
  AstBitAnd(AstExpr* left,
	    AstExpr* right);

  /// @brief デストラクタ
  virtual
  ~AstBitAnd();


public:
  //////////////////////////////////////////////////////////////////////
  // 外部インターフェイス
  //////////////////////////////////////////////////////////////////////

  /// @brief 型を得る．
  virtual
  AstType
  type() const;

};


//////////////////////////////////////////////////////////////////////
/// @class AstBitOr AstBinOp.h "AstBinOp.h"
/// @brief ビットORを表す Ast
//////////////////////////////////////////////////////////////////////
class AstBitOr :
  public AstBinOp
{
public:

  /// @brief コンストラクタ
  /// @param[in] left, right オペランド
  AstBitOr(AstExpr* left,
	   AstExpr* right);

  /// @brief デストラクタ
  virtual
  ~AstBitOr();


public:
  //////////////////////////////////////////////////////////////////////
  // 外部インターフェイス
  //////////////////////////////////////////////////////////////////////

  /// @brief 型を得る．
  virtual
  AstType
  type() const;

};


//////////////////////////////////////////////////////////////////////
/// @class AstBitXor AstBinOp.h "AstBinOp.h"
/// @brief ビットXORを表す Ast
//////////////////////////////////////////////////////////////////////
class AstBitXor :
  public AstBinOp
{
public:

  /// @brief コンストラクタ
  /// @param[in] left, right オペランド
  AstBitXor(AstExpr* left,
	    AstExpr* right);

  /// @brief デストラクタ
  virtual
  ~AstBitXor();


public:
  //////////////////////////////////////////////////////////////////////
  // 外部インターフェイス
  //////////////////////////////////////////////////////////////////////

  /// @brief 型を得る．
  virtual
  AstType
  type() const;

};


//////////////////////////////////////////////////////////////////////
/// @class AstLogAnd AstBinOp.h "AstBinOp.h"
/// @brief 論理積を表す Ast
//////////////////////////////////////////////////////////////////////
class AstLogAnd :
  public AstBinOp
{
public:

  /// @brief コンストラクタ
  /// @param[in] left, right オペランド
  AstLogAnd(AstExpr* left,
	    AstExpr* right);

  /// @brief デストラクタ
  virtual
  ~AstLogAnd();


public:
  //////////////////////////////////////////////////////////////////////
  // 外部インターフェイス
  //////////////////////////////////////////////////////////////////////

  /// @brief 型を得る．
  virtual
  AstType
  type() const;

};


//////////////////////////////////////////////////////////////////////
/// @class AstLogOr AstBinOp.h "AstBinOp.h"
/// @brief 論理和を表す Ast
//////////////////////////////////////////////////////////////////////
class AstLogOr :
  public AstBinOp
{
public:

  /// @brief コンストラクタ
  /// @param[in] left, right オペランド
  AstLogOr(AstExpr* left,
	   AstExpr* right);

  /// @brief デストラクタ
  virtual
  ~AstLogOr();


public:
  //////////////////////////////////////////////////////////////////////
  // 外部インターフェイス
  //////////////////////////////////////////////////////////////////////

  /// @brief 型を得る．
  virtual
  AstType
  type() const;

};


//////////////////////////////////////////////////////////////////////
/// @class AstLogXor AstBinOp.h "AstBinOp.h"
/// @brief 排他的論理和を表す Ast
//////////////////////////////////////////////////////////////////////
class AstLogXor :
  public AstBinOp
{
public:

  /// @brief コンストラクタ
  /// @param[in] left, right オペランド
  AstLogXor(AstExpr* left,
	    AstExpr* right);

  /// @brief デストラクタ
  virtual
  ~AstLogXor();


public:
  //////////////////////////////////////////////////////////////////////
  // 外部インターフェイス
  //////////////////////////////////////////////////////////////////////

  /// @brief 型を得る．
  virtual
  AstType
  type() const;

};


//////////////////////////////////////////////////////////////////////
/// @class AstEqEq AstBinOp.h "AstBinOp.h"
/// @brief 等価演算子を表す Ast
//////////////////////////////////////////////////////////////////////
class AstEqEq :
  public AstBinOp
{
public:

  /// @brief コンストラクタ
  /// @param[in] left, right オペランド
  AstEqEq(AstExpr* left,
	  AstExpr* right);

  /// @brief デストラクタ
  virtual
  ~AstEqEq();


public:
  //////////////////////////////////////////////////////////////////////
  // 外部インターフェイス
  //////////////////////////////////////////////////////////////////////

  /// @brief 型を得る．
  virtual
  AstType
  type() const;

};


//////////////////////////////////////////////////////////////////////
/// @class AstNotEq AstBinOp.h "AstBinOp.h"
/// @brief 非等価演算子を表す Ast
//////////////////////////////////////////////////////////////////////
class AstNotEq :
  public AstBinOp
{
public:

  /// @brief コンストラクタ
  /// @param[in] left, right オペランド
  AstNotEq(AstExpr* left,
	   AstExpr* right);

  /// @brief デストラクタ
  virtual
  ~AstNotEq();


public:
  //////////////////////////////////////////////////////////////////////
  // 外部インターフェイス
  //////////////////////////////////////////////////////////////////////

  /// @brief 型を得る．
  virtual
  AstType
  type() const;

};


//////////////////////////////////////////////////////////////////////
/// @class AstLt AstBinOp.h "AstBinOp.h"
/// @brief 小なり演算子を表す Ast
//////////////////////////////////////////////////////////////////////
class AstLt :
  public AstBinOp
{
public:

  /// @brief コンストラクタ
  /// @param[in] left, right オペランド
  AstLt(AstExpr* left,
	AstExpr* right);

  /// @brief デストラクタ
  virtual
  ~AstLt();


public:
  //////////////////////////////////////////////////////////////////////
  // 外部インターフェイス
  //////////////////////////////////////////////////////////////////////

  /// @brief 型を得る．
  virtual
  AstType
  type() const;

};


//////////////////////////////////////////////////////////////////////
/// @class AstGt AstBinOp.h "AstBinOp.h"
/// @brief 小なり演算子を表す Ast
//////////////////////////////////////////////////////////////////////
class AstGt :
  public AstBinOp
{
public:

  /// @brief コンストラクタ
  /// @param[in] left, right オペランド
  AstGt(AstExpr* left,
	AstExpr* right);

  /// @brief デストラクタ
  virtual
  ~AstGt();


public:
  //////////////////////////////////////////////////////////////////////
  // 外部インターフェイス
  //////////////////////////////////////////////////////////////////////

  /// @brief 型を得る．
  virtual
  AstType
  type() const;

};


//////////////////////////////////////////////////////////////////////
/// @class AstLe AstBinOp.h "AstBinOp.h"
/// @brief 小なり演算子を表す Ast
//////////////////////////////////////////////////////////////////////
class AstLe :
  public AstBinOp
{
public:

  /// @brief コンストラクタ
  /// @param[in] left, right オペランド
  AstLe(AstExpr* left,
	AstExpr* right);

  /// @brief デストラクタ
  virtual
  ~AstLe();


public:
  //////////////////////////////////////////////////////////////////////
  // 外部インターフェイス
  //////////////////////////////////////////////////////////////////////

  /// @brief 型を得る．
  virtual
  AstType
  type() const;

};


//////////////////////////////////////////////////////////////////////
/// @class AstGe AstBinOp.h "AstBinOp.h"
/// @brief 小なり演算子を表す Ast
//////////////////////////////////////////////////////////////////////
class AstGe :
  public AstBinOp
{
public:

  /// @brief コンストラクタ
  /// @param[in] left, right オペランド
  AstGe(AstExpr* left,
	AstExpr* right);

  /// @brief デストラクタ
  virtual
  ~AstGe();


public:
  //////////////////////////////////////////////////////////////////////
  // 外部インターフェイス
  //////////////////////////////////////////////////////////////////////

  /// @brief 型を得る．
  virtual
  AstType
  type() const;

};

END_NAMESPACE_YM_YMSL

#endif // ASTBINOP_H
