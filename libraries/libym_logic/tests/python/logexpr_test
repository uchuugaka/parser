# -*- coding:utf-8 -*-

import logic


# LogExpr オブジェクトのメンバ関数のテスト
def logexpr_check(expr, name) :
    print ""
    print "logexpr_check(%s, %s)" % (expr, name)
    print " is_zero()                 => %s" % expr.is_zero()
    print " is_one()                  => %s" % expr.is_one()
    print " is_constant()             => %s" % expr.is_constant()
    print " is_posiliteral()          => %s" % expr.is_posiliteral()
    print " is_negaliteral()          => %s" % expr.is_negaliteral()
    print " is_literal()              => %s" % expr.is_literal()
    print " is_and()                  => %s" % expr.is_and()
    print " is_or()                   => %s" % expr.is_or()
    print " is_xor()                  => %s" % expr.is_xor()
    print " is_op()                   => %s" % expr.is_op()
    print " is_simple()               => %s" % expr.is_simple()
    print " is_simple_and()           => %s" % expr.is_simple_and()
    print " is_simple_or()            => %s" % expr.is_simple_or()
    print " is_simple_xor()           => %s" % expr.is_simple_xor()
    print " is_sop()                  => %s" % expr.is_sop()
    print " input_size()              => %s" % expr.input_size()
    print " litnum()                  => %s" % expr.litnum()

    n = expr.input_size()
    for i in range(n) :
        vid = logic.VarId(i)
        print " litnum(%s)               => %s" % (vid, expr.litnum(vid))

    pols = [logic.Pol.make_positive(),
            logic.Pol.make_negative()]
    for i in range(n) :
        vid = logic.VarId(i)
        for pol in pols:
            print " litnum(%s, %s)     => %s" % (vid, pol, expr.litnum(vid, pol))

    print " sop_cubenum()             => %s" % expr.sop_cubenum()
    print " sop_litnum()              => %s" % expr.sop_litnum()

    for i in range(n) :
        vid = logic.VarId(i)
        print " sop_litnum(%s)           => %s" % (vid, expr.sop_litnum(vid))

    pols = [logic.Pol.make_positive(),
            logic.Pol.make_negative()]
    for i in range(n) :
        vid = logic.VarId(i)
        for pol in pols:
            print " sop_litnum(%s, %s) => %s" % (vid, pol, expr.sop_litnum(vid, pol))

    if expr.is_literal() :
        print " varid()                   => %s" % expr.varid()

    if expr.is_op() :
        n = expr.child_num()
        for i in range(n) :
            sub = expr.child(i)
            print " child(%d)                  => %s" % (i, sub)

        clist = expr.child_list()
        print " child_list                => [",
        comma = ""
        for child in clist :
            print "%s%s" % (comma, child),
            comma = ", "
        print "]"

# オブジェクトの生成
c0 = logic.LogExpr.make_zero()
c1 = logic.LogExpr.make_one()
v0 = logic.VarId(0)
l0 = logic.LogExpr.make_literal(v0)
pol_p = logic.Pol.make_positive()
l0p = logic.LogExpr.make_literal(v0, pol_p)
l0p2 = logic.LogExpr.make_posiliteral(v0)
l0n = logic.LogExpr.make_negaliteral(v0)
v1 = logic.VarId(1)
lit1 = logic.Literal(v1)
l1 = logic.LogExpr.make_literal(lit1)
expr0 = logic.LogExpr("0 + ~1 & 3")
expr1 = logic.LogExpr("0 * 1 * ~2")
expr2 = logic.LogExpr("0 + 2")

expr3 = logic.LogExpr.make_and(l0, l1)
expr4 = logic.LogExpr.make_or(l0, l1)
expr5 = logic.LogExpr.make_xor(l0, l1)

# 内容の表示 & チェック
logexpr_check(c0, "zero")
logexpr_check(c1, "one")
logexpr_check(l0, "make_literal(v0)")
logexpr_check(l0p, "make_literal(v0, positive)")
logexpr_check(l0p2, "make_posiliteral(v0)")
logexpr_check(l0n, "make_negaliteral(v0)")
logexpr_check(l1, "make_literal(lit1)")
logexpr_check(expr0, "0 + ~1 & 3")
logexpr_check(expr1, "0 * 1 * ~2")
logexpr_check(expr0.invert(), "expr0.invert()")
logexpr_check(expr1.invert(), "expr1.invert()")
logexpr_check(expr2, "0 + 2")
logexpr_check(expr3, "make_and(l0, l1)")
logexpr_check(expr4, "make_or(l0, l1)")
logexpr_check(expr5, "make_xor(l0, l1)")

# compose のテスト
expr10 = logic.LogExpr("0 * 1 + ~2")
expr11 = logic.LogExpr("0 + 1")
v2 = logic.VarId(2)
expr12 = expr10.compose(v2, expr11)
logexpr_check(expr10, "expr10:0 * 1 + ~2")
logexpr_check(expr11, "expr11:0 + 1")
logexpr_check(expr12, "expr10.compose(v2, expr11)")

# multi_compose のテスト
expr20 = logic.LogExpr("0 * 1 * 2")
expr21 = logic.LogExpr("3 * 4")
expr22 = logic.LogExpr("5 * 6")
expr23 = logic.LogExpr("7 * 8")
v2 = logic.VarId(2)
comp_map = { v0 : expr21.invert(),
             v1 : expr22.invert(),
             v2 : expr23.invert() }
expr25 = expr20.multi_compose(comp_map)
logexpr_check(expr25, "expr20.multi_compose(comp_map)")

# remap_var のテスト
v3 = logic.VarId(3)
v4 = logic.VarId(4)
v5 = logic.VarId(5)
v6 = logic.VarId(6)
v7 = logic.VarId(7)
v8 = logic.VarId(8)
var_map = { v3 : v0,
            v4 : v1,
            v5 : v2,
            v6 : v3,
            v7 : v4,
            v8 : v5 }
expr30 = expr25.remap_var(var_map)
logexpr_check(expr30, "expr25.remap_var(var_map)")
