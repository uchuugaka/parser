# -*- coding:utf-8 -*-

import logic


# Literal オブジェクトのメンバ関数のテスト
def lit_check(l, l_name) :
    print ""
    print "lit_check(%s, %s)" % (l, l_name)
    print " varid()         => %s" % l.varid()
    print " pol()           => %s" % l.pol()
    print " negate()        => %s" % l.negate()
    print " make_positive() => %s" % l.make_positive()
    print " make_negative() => %s" % l.make_negative()
    print " index()         => %s" % l.index()

# Literal オブジェクトの比較演算子のテスト関数
def comp_check(l1, l2) :

   print ""
   print "compare %s with %s" % (l1, l2)

   if l1 == l2 :
      print "%s == %s" % (l1, l2)
   else :
      print "!(%s == %s)" % (l1, l2)

   if l1 != l2 :
      print "%s != %s" % (l1, l2)
   else :
      print "!(%s != %s)" % (l1, l2)

   if l1 < l2 :
      print "%s < %s" % (l1, l2)
   else :
      print "!(%s < %s)" % (l1, l2)

   if l1 <= l2 :
      print "%s <= %s" % (l1, l2)
   else :
      print "!(%s <= %s)" % (l1, l2)

   if l1 > l2 :
      print "%s > %s" % (l1, l2)
   else :
      print "!(%s > %s)" % (l1, l2)

   if l1 >= l2 :
      print "%s >= %s" % (l1, l2)
   else :
      print "!(%s >= %s)" % (l1, l2)


# オブジェクトの生成
v0 = logic.VarId(0)
v1 = logic.VarId(1)
v2 = logic.VarId(2)

pol_p = logic.Pol.make_positive()
pol_n = logic.Pol.make_negative()

l   = logic.Literal()

l0  = logic.Literal(v0)
l0p = logic.Literal(v0, pol_p)
l0n = logic.Literal(v0, pol_n)

l1  = logic.Literal(v1)
l1p = logic.Literal(v1, pol_p)
l1n = logic.Literal(v1, pol_n)

l2  = logic.Literal(v2)
l2p = logic.Literal(v2, pol_p)
l2n = logic.Literal(v2, pol_n)

# 内容の表示 & チェック
lit_check(l  , "Literal()")
lit_check(l0 , "Literal(v0)")
lit_check(l0p, "Literal(v0, pol_p)")
lit_check(l0n, "Literal(v0, pol_n)")
lit_check(l1 , "Literal(v1)")
lit_check(l1p, "Literal(v1, pol_p)")
lit_check(l1n, "Literal(v1, pol_n)")
lit_check(l2 , "Literal(v2)")
lit_check(l2p, "Literal(v2, pol_p)")
lit_check(l2n, "Literal(v2, pol_n)")

# 比較関数のテスト
comp_check( l0p, l0p )
comp_check( l0p, l0n )
comp_check( l0p, l1p )
comp_check( l0p, l1n )
comp_check( l0p, l2p )
comp_check( l0p, l2n )

comp_check( l0n, l0p )
comp_check( l0n, l0n )
comp_check( l0n, l1p )
comp_check( l0n, l1n )
comp_check( l0n, l2p )
comp_check( l0n, l2n )

comp_check( l1p, l0p )
comp_check( l1p, l0n )
comp_check( l1p, l1p )
comp_check( l1p, l1n )
comp_check( l1p, l2p )
comp_check( l1p, l2n )

comp_check( l1n, l0p )
comp_check( l1n, l0n )
comp_check( l1n, l1p )
comp_check( l1n, l1n )
comp_check( l1n, l2p )
comp_check( l1n, l2n )

comp_check( l2p, l0p )
comp_check( l2p, l0n )
comp_check( l2p, l1p )
comp_check( l2p, l1n )
comp_check( l2p, l2p )
comp_check( l2p, l2n )

comp_check( l2n, l0p )
comp_check( l2n, l0n )
comp_check( l2n, l1p )
comp_check( l2n, l1n )
comp_check( l2n, l2p )
comp_check( l2n, l2n )

# set() 関数とハッシュのテスト

lit_map = { l0p : "l0p", l0n : "l0n",
            l1p : "l1p", l1n : "l1n",
            l2p : "l2p", l2n : "l2n" }

print ""
print "lit_map[l0p] = %s" % lit_map[l0p]
print "lit_map[l0n] = %s" % lit_map[l0n]
print "lit_map[l1p] = %s" % lit_map[l1p]
print "lit_map[l1n] = %s" % lit_map[l1n]
print "lit_map[l2p] = %s" % lit_map[l2p]
print "lit_map[l2n] = %s" % lit_map[l2n]
print "lit_map[l]   = %s" % lit_map[l]

lx = logic.Literal()
lx.set(v2, pol_n)
print "lit_map[v2, pol_n] = %s" % lit_map[lx]
