#include <iostream>
#include <fstream>

//////////////////////////////////////////////////////////////////////
// システム検査の結果
//////////////////////////////////////////////////////////////////////

// <stdlib.h> が存在する時定義されるマクロ
#cmakedefine HAVE_STDLIB_H

// <string.h> が存在する時定義されるマクロ
#cmakedefine HAVE_STRING_H

// <strings.h> が存在する時定義されるマクロ
#cmakedefine HAVE_STRINGS_H

// <unistd.h> が存在する時定義されるマクロ
#cmakedefine HAVE_UNISTD_H

// <limits.h> が存在する時定義されるマクロ
#cmakedefine HAVE_LIMITS_H

// <float.h> が存在する時定義されるマクロ
#cmakedefine HAVE_FLOAT_H

// <math.h> が存在する時定義されるマクロ
#cmakedefine HAVE_MATH_H

// <sys/time.h> が存在する時定義されるマクロ
#cmakedefine HAVE_SYS_TIME_H

// <time.h> が存在する時定義されるマクロ
#cmakedefine HAVE_TIME_H

// <sys/stat.h> が存在する時定義されるマクロ
#cmakedefine HAVE_SYS_STAT_H

// <pwd.h> が存在する時定義されるマクロ
#cmakedefine HAVE_PWD_H

// <sys/param.h> が存在する時定義されるマクロ
#cmakedefine HAVE_SYS_PARAM_H

// getrusage() が存在する時定義されるマクロ
#cmakedefine HAVE_GETRUSAGE

// times() が存在する時定義されるマクロ
#cmakedefine HAVE_TIMES

// zlib が使用可能の時定義されるマクロ
#cmakedefine ZLIB_FOUND

// bzip2 が使用可能の時定義されるマクロ
#cmakedefine BZIP2_FOUND

// lzma が使用可能の時定義されるマクロ
#cmakedefine LIBLZMA_FOUND

// Qt4 が使用可能の時定義されるマクロ
#cmakedefine Qt4_FOUND

// Python ライブラリが使用可能の時定義されるマクロ
#cmakedefine PYTHONINTERP_FOUND

// Tcl/Tk が使用可能の時定義されるマクロ
#cmakedefine TCL_FOUND

// Popt が使用可能の時定義されるマクロ
#cmakedefine POPT_FOUND

// gmp(xx) が使用可能の時定義されるマクロ
#cmakedefine GMP_FOUND

// readline が使用可能の時定義されるマクロ
#cmakedefine READLINE_FOUND

// <curses.h> があるとき定義されるマクロ
#cmakedefine CURSES_HAVE_CURSES_H

// <ncurses.h> があるとき定義されるマクロ
#cmakedefine CURSES_HAVE_NCURSES_H

// <ncurses/curses.h> があるとき定義されるマクロ
#cmakedefine CURSES_HAVE_NCURSES_CURSES_H

// <ncurses/ncurses.h> があるとき定義されるマクロ
#cmakedefine CURSES_HAVE_NCURSES_NCURSES_H

// UNIX の時 true となるマクロ
#cmakedefine UNIX

// WINDOWS の時 true となるマクロ
#cmakedefine WIN32

// MAC OS-X の時 true となるマクロ
#cmakedefine APPLE

const char header1 [] =
  "#ifndef YMTOOLS_H\n"
  "#define YMTOOLS_H\n"
  "\n"
  "/// @file YmTools.h\n"
  "/// @brief YmTools のヘッダファイル\n"
  "/// @author Yusuke Matsunaga (松永 裕介)\n"
  "///\n"
  "/// Copyright (C) 2014 Yusuke Matsunaga\n"
  "/// All rights reserved.\n"
  "\n"
  "\n"
  "// プロジェクトの major バージョン\n"
  "#define YMTOOLS_VERSION_MAJIR @YMTOOLS_VERSION_MAJOR@\n"
  "\n"
  "// プロジェクトの minor バージョン\n"
  "#define YMTOOLS_VERSION_MINOR @YMTOOLS_VERSION_MINOR@\n"
  "\n"
  "// プロジェクトの名前空間\n"
  "#define YMTOOLS_NAMESPACE @YMTOOLS_NAMESPACE@\n"
  "\n"
  "\n"
  "//////////////////////////////////////////////////////////////////////\n"
  "// システム検査の結果\n"
  "//////////////////////////////////////////////////////////////////////\n"
  "\n"
  "// <stdlib.h> が存在する時定義されるマクロ\n"
  "#cmakedefine HAVE_STDLIB_H\n"
  "\n"
  "// <string.h> が存在する時定義されるマクロ\n"
  "#cmakedefine HAVE_STRING_H\n"
  "\n"
  "// <strings.h> が存在する時定義されるマクロ\n"
  "#cmakedefine HAVE_STRINGS_H\n"
  "\n"
  "// <unistd.h> が存在する時定義されるマクロ\n"
  "#cmakedefine HAVE_UNISTD_H\n"
  "\n"
  "// <limits.h> が存在する時定義されるマクロ\n"
  "#cmakedefine HAVE_LIMITS_H\n"
  "\n"
  "// <float.h> が存在する時定義されるマクロ\n"
  "#cmakedefine HAVE_FLOAT_H\n"
  "\n"
  "// <math.h> が存在する時定義されるマクロ\n"
  "#cmakedefine HAVE_MATH_H\n"
  "\n"
  "// <sys/time.h> が存在する時定義されるマクロ\n"
  "#cmakedefine HAVE_SYS_TIME_H\n"
  "\n"
  "// <time.h> が存在する時定義されるマクロ\n"
  "#cmakedefine HAVE_TIME_H\n"
  "\n"
  "// <sys/stat.h> が存在する時定義されるマクロ\n"
  "#cmakedefine HAVE_SYS_STAT_H\n"
  "\n"
  "\n"
  "// <pwd.h> が存在する時定義されるマクロ\n"
  "#cmakedefine HAVE_PWD_H\n"
  "\n"
  "// <sys/param.h> が存在する時定義されるマクロ\n"
  "#cmakedefine HAVE_SYS_PARAM_H\n"
  "\n"
  "// getrusage() が存在する時定義されるマクロ\n"
  "#cmakedefine HAVE_GETRUSAGE\n"
  "\n"
  "// times() が存在する時定義されるマクロ\n"
  "#cmakedefine HAVE_TIMES\n"
  "\n"
  "// zlib が使用可能の時定義されるマクロ\n"
  "#cmakedefine ZLIB_FOUND\n"
  "\n"
  "// bzip2 が使用可能の時定義されるマクロ\n"
  "#cmakedefine BZIP2_FOUND\n"
  "\n"
  "// lzma が使用可能の時定義されるマクロ\n"
  "#cmakedefine LIBLZMA_FOUND\n"
  "\n"
  "// Qt4 が使用可能の時定義されるマクロ\n"
  "#cmakedefine Qt4_FOUND\n"
  "\n"
  "// Python ライブラリが使用可能の時定義されるマクロ\n"
  "#cmakedefine PYTHONINTERP_FOUND\n"
  "\n"
  "// Tcl/Tk が使用可能の時定義されるマクロ\n"
  "#cmakedefine TCL_FOUND\n"
  "\n"
  "// Popt が使用可能の時定義されるマクロ\n"
  "#cmakedefine POPT_FOUND\n"
  "\n"
  "// gmp(xx) が使用可能の時定義されるマクロ\n"
  "#cmakedefine GMP_FOUND\n"
  "\n"
  "// readline が使用可能の時定義されるマクロ\n"
  "#cmakedefine READLINE_FOUND\n"
  "\n"
  "// <curses.h> があるとき定義されるマクロ\n"
  "#cmakedefine CURSES_HAVE_CURSES_H\n"
  "\n"
  "// <ncurses.h> があるとき定義されるマクロ\n"
  "#cmakedefine CURSES_HAVE_NCURSES_H\n"
  "\n"
  "// <ncurses/curses.h> があるとき定義されるマクロ\n"
  "#cmakedefine CURSES_HAVE_NCURSES_CURSES_H\n"
  "\n"
  "// <ncurses/ncurses.h> があるとき定義されるマクロ\n"
  "#cmakedefine CURSES_HAVE_NCURSES_NCURSES_H\n"
  "\n"
  "// UNIX の時 true となるマクロ\n"
  "#cmakedefine UNIX\n"
  "\n"
  "// WINDOWS の時 true となるマクロ\n"
  "#cmakedefine WIN32\n"
  "\n"
  "// MAC OS-X の時 true となるマクロ\n"
  "#cmakedefine APPLE\n"
  "\n";


const char header2[] =
  "\n"
  "//////////////////////////////////////////////////////////////////////\n"
  "// サイズ固定の組み込み型\n"
  "//////////////////////////////////////////////////////////////////////\n"
  "\n"
  "#define SIZEOF_SHORT @SHORT_SIZE@\n"
  "#define SIZEOF_INT @INT_SIZE@\n"
  "#define SIZEOF_LONG @LONG_SIZE@\n"
  "#define SIZEOF_LONG_LONG @LLONG_SIZE@\n"
  "\n"
  "/// @brief 符号付き整数型\n"
  "typedef int ymint;\n"
  "\n"
  "/// @brief 符号なし整数型\n"
  "typedef unsigned int ymuint;\n"
  "\n"
  "/// @brief 符号付きlong型\n"
  "typedef long int ymlong;\n"
  "\n"
  "/// @brief 符号なしlong型\n"
  "typedef unsigned long int ymulong;\n"
  "\n"
  "/// @brief 符号付き8ビット整数型\n"
  "typedef char ymint8;\n"
  "\n"
  "/// @brief 符号なし8ビット整数型\n"
  "typedef unsigned char ymuint8;\n"
  "\n";

const char header3[] =
  "\n"
  "#include \"YmUtils/nsdef.h\"\n"
  "#include \"YmUtils/stl.h\"\n"
  "#include \"YmUtils/assert.h\"\n"
  "\n"
  "#endif // YMTOOLS_H\n";


int
main(int argc,
     char** argv)
{
  using namespace std;

  cout << header1;

#if defined(HAVE_STDLIB_H)
  cout << "#include <stdlib.h>" << endl;
#endif

#if defined(HAVE_STRING_H)
  cout << "#include <string.h>" << endl;
#endif

#if defined(HAVE_UNISTD_H)
  cout << "#include <unistd.h>" << endl;
#endif

#if defined(HAVE_LIMITS_H)
  cout << "#include <limits.h>" << endl;
#endif

#if defined(HAVE_FLOAT_H)
  cout << "#include <float.h>" << endl;
#endif

#if defined(HAVE_MATH_H)
  cout << "#include <math.h>" << endl;
#endif

#if defined(HAVE_SYS_TIME_H) && defined(HAVE_TIME_H)
  cout << "#include <sys/time.h>" << endl
       << "#include <time.h>" << endl;
#elif defined(HAVE_SYS_TIME_H)
  cout << "#include <sys/time.h>" << endl;
#elif defined(HAVE_TIME_H)
  cout << "#include <time.h>" << endl;
#else
  cerr << "Neither <sys/time.h> nor <time.h> are not found" << endl;
  return 255;
#endif

#if defined(HAVE_SYS_STAT_H)
  cout << "#include <sys/stat.h>" << endl;
#endif

  cout << header2;

  if ( @SHORT_SIZE@ == 2 ) {
    cout << "/// @brief 符号付き16ビット整数型" << endl
	 << "typedef short ymint16;" << endl
	 << endl
	 << "/// @brief 符号なし16ビット整数型" << endl
	 << "typedef unsigned short ymuint16;" << endl;
  }
  else if ( @INT_SIZE@ == 2 ) {
    cout << "/// @brief 符号付き16ビット整数型" << endl
	 << "typedef int ymint16;" << endl
	 << endl
	 << "/// @brief 符号なし16ビット整数型" << endl
	 << "typedef unsigned int ymuint16;" << endl;
  }
  else {
    cerr << "No valid 16-bit integer type is avaliable" << endl;
    return 255;
  }
  cout << endl;
  if ( @SHORT_SIZE@ == 4 ) {
    cout << "/// @brief 符号付き32ビット整数型" << endl
	 << "typedef short ymint32;" << endl
	 << endl
	 << "/// @brief 符号なし32ビット整数型" << endl
	 << "typedef unsigned short ymuint32;" << endl;
  }
  else if ( @INT_SIZE@ == 4 ) {
    cout << "/// @brief 符号付き32ビット整数型" << endl
	 << "typedef int ymint32;" << endl
	 << endl
	 << "/// @brief 符号なし32ビット整数型" << endl
	 << "typedef unsigned int ymuint32;" << endl;
  }
  else if ( @LONG_SIZE@ == 4 ) {
    cout << "/// @brief 符号付き32ビット整数型" << endl
	 << "typedef long int ymint32;" << endl
	 << endl
	 << "/// @brief 符号なし32ビット整数型" << endl
	 << "typedef unsigned long int ymuint32;" << endl;
  }
  else {
    cerr << "No valid 32-bit integer type is avaliable" << endl;
    return 255;
  }
  cout << endl;
  if ( @INT_SIZE@ == 8 ) {
    cout << "/// @brief 符号付き64ビット整数型" << endl
	 << "typedef int ymint64;" << endl
	 << endl
	 << "/// @brief 符号なし64ビット整数型" << endl
	 << "typedef unsigned int ymuint64;" << endl;
  }
  else if ( @LONG_SIZE@ == 8 ) {
    cout << "/// @brief 符号付き64ビット整数型" << endl
	 << "typedef long int ymint64;" << endl
	 << endl
	 << "/// @brief 符号なし64ビット整数型" << endl
	 << "typedef unsigned long int ymuint64;" << endl;
  }
  else if ( @LLONG_SIZE@ == 8 ) {
    cout << "/// @brief 符号付き64ビット整数型" << endl
	 << "typedef long long ymint64;" << endl
	 << endl
	 << "/// @brief 符号なし64ビット整数型" << endl
	 << "typedef unsigned long long ymuint64;" << endl;
  }
  else {
    cerr << "No valid 64-bit integer type is avaliable" << endl;
    return 255;
  }
  cout << endl;
  if ( @INT_SIZE@ == @VOIDP_SIZE@ ) {
    cout << "/// @brief ポインタと同サイズの符号なし整数型" << endl
	 << "typedef unsigned int ympuint;" << endl;
  }
  else if ( @LONG_SIZE@ == @VOIDP_SIZE@ ) {
    cout << "/// @brief ポインタと同サイズの符号なし整数型" << endl
	 << "typedef unsigned long ympuint;" << endl;
  }
  else if ( @LLONG_SIZE@ == @VOIDP_SIZE@ ) {
    cout << "/// @brief ポインタと同サイズの符号なし整数型" << endl
	 << "typedef unsigned long long ympuint;" << endl;
  }
  else {
    cerr << "No valid pointer-size integer type is avaliable" << endl;
    return 255;
  }

  cout << "/// @brief double 型の整列境界値" << endl;
#if defined(WIN32)
    cout << "const int ALIGNOF_DOUBLE = " << __alignof(double) << ";" << endl;
#else
    cout << "const int ALIGNOF_DOUBLE = " << __alignof__(double) << ";" << endl;
#endif
  cout << endl;

  cout << header3;

  return 0;
}
