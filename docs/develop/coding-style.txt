$Source: /export/home/project/synth/cvsrepos/ymtools/docs/develop/coding-style.txt,v $
$Author: matsunaga $
$Date: 2005/12/11 17:07:20 $
$Revision: 1.1.1.1 $

コーディングスタイルについて

1. 関数の定義

普通，多くの教科書では

int function_a(int x, char* y)
{
  ...
}

という書き方としていると思いますが，ここでは，

int
function_a(int x, char* y)
{
  ...
}

という書き方を「強く」奨めます．

理由は関数の定義(宣言ではない)をしている箇所を探すのに便利だからです．

例えば function_a の定義されている箇所を探すのに

grep function_a *.cc

としたのでは定義したところだけでなく参照(呼び出し)しているところも拾っ
てしまいます．

ところが上の規約に従っていれば

egrep ^function_a *.cc

でOKです．


2. 名前空間

とりあえず Magus では nsMagus という名前空間の下にほとんどのクラスや関
数をおいています．
その他のパッケージ(パッケージというほどのものではなく src/以下のサブディ
レクトリのことだと思ってください)はこの nsMagus のさらに自身の名前空間
を持っています．

で，名前空間の名前づけにさしたるルールはないのですが，

Xxx::Yyy::a_function

という書き方をしたときに，人間がみてこの Xxx とか Yyy が名前空間なのか
クラス名なのかわかりにくいと不便だと思ったので私は名前空間は 'ns' とい
う文字で始るようにしています．で，次が大文字となります．
ま，これは好みですけどなるべく統一した方が良いと思います．

また，Magus では base/common.h 中で名前空間の定義用のマクロを用意して
います．

namespace nm {
....
}

と書く代わりに

BEGIN_NAMESPACE(nm)
....
END_NAMESPACE(nm)

を使ってください．emacs などの字下げを自動的に行うエディタを使うときに
字下げが起こらなくなるので見易いです．また多くの場合，

BEGIN_NAMESPACE_MAGUS_BDD

のようなマクロも定義しています．
src/base/common.h
を参照してください．


3. クラス名

昔はクラス名は CBdd のように 'C' + 大文字で始る文字列，というルールに
していました．今は大文字で始る文字列にしています．インスタンス名(変数
名)と区別するためにも大文字で始めるという規則はいいと思っています．


4. 関数名，変数名

規則はありませんが，上のクラス名と区別するために小文字で始めておいた方
がよいでしょう．人によっては aLongLongName みたいに途中を大文字にする
人がいますが，私は a_long_long_name とアンダースコア(_)をつけるように
しています．

尚，メンバ変数はローカル変数(自動変数)やグローバル変数，スタティック変
数と区別するために 'm' + 大文字で始る文字列 にしています．

mNi, mInputs

みたいな感じで．この規則は守っておいた方が良いと思います．


5. 定数名

'k' + 大文字で始る文字列 を使っています．昔のCのプログラマは定数を
#define マクロで代用していましたので，すべて大文字の識別子が定数を表す
ことが多かった(たとえば DBL_MAX など)のですが，C++ では定数を使うのが
お行儀の良い書き方となっていますので，

const int kMaxNumberOfInputs = 5;

みたいな使い方をしてください．
k というのは良く科学などで定数を K と表記するからです(const のドイツ語
表記の頭文字？)．

6. 型名

型名といっても size_t のような int 系の別名から enum の型，struct 果て
は class 名までさまざまですが，ここでは内部では int 系の組み込み型にな
るであろう型に対しては tXxxx という表記法を用いています．以下は
base/common.h の一部の抜粋です．

///////////////////////////////////////////////
// 変数番号を表す型
///////////////////////////////////////////////
// 範囲は 0 〜 kVarIdMax
typedef size_t tVarId;

// 変数番号の最大値
// 極性をパックすることを考えて 1 ビット減らしている．
const tVarId kVarIdMax = 1 << (sizeof(size_t) * 8 - 1);


///////////////////////////////////////////////
// 極性を表す型
///////////////////////////////////////////////
enum tPol {
  // 肯定(正極性)
  kPolPosi = 0,
  // 否定(負極性)
  kPolNega = 1
};

こんな感じです．ちなみに kVarIdMax や kPolPosi は定数なので 'k' で始っ
ています．


7. インクルードファイル

インクルードファイルは以下の形式で始めてください．
これは src/base/Expr.h の例です．先頭の数字は行番号で実際の内容には含
まれません．

 1 #ifndef BASE_EXPR_H
 2 #define BASE_EXPR_H
 3
 4 // $Source: /export/home/project/synth/cvsrepos/ymtools/docs/develop/coding-style.txt,v $
 5 // $Author: matsunaga $                  
 6 // $Revision: 1.1.1.1 $
 7 // $Date: 2005/12/11 17:07:20 $
 8
 9 // Expr.h  --- class definition for Expr
10
11 #include "base/common.h"

1行目，2行目: 同じインクルードファイルを2回以上インクルードしないため
のおまじない．このマクロ名の命名規則はこのファイルのパス名をすべて大文字
に置き換えて '.' を '_' に置き換えるというものです．
base/Expr.h なので BASE_EXPR_H になっています．
ちなみに．このようにインクルードファイル全体が #ifndef で囲まれている
のでファイルの末尾に #endif が必要です．忘れないようにしましょう．

4行目〜7行目: プログラムそのものには関係ありませんが一応，CVS のキーワー
ド置換の機能を使ってバージョン番号や日時などがわかるようになっています．
この ':' 以降の文字列は CVS に登録する際に自動的に作られますので，最初
は

// ＄Source:$
// ＄Author:$
// ＄Revision:$
// ＄Date:$

という内容にしておけば良いです．ちなみに最初の$が全角なのはタイプミス
ではありません．ここを本当の$にしておくとこのファイルをチェックインし
たときに置き換えられてしまうからです．
別のファイルをコピーしてきた場合，':'以降の部分は自動的に削除されるの
でそのままでも構いません．

11行目: 標準インクルードファイルのインクルードや名前空間定義用のマクロ
などがありますのでこの base/common.h は必ずインクルードしてください．
ただし Magus の他のインクルードファイルも必ずインクルードしているので
そちらでインクルードしていることが明らかなら書かなくても大丈夫です．
もちろん，二重に書いておいても最初の #ifndef トラップによって二重にイン
クルードされないようになっています．


8. C++ のソースファイル

C++ のソースファイルの拡張子('.'以降の文字列)は，'.cxx', '.cc', '.C',
'.cpp', '.c++', '.cp' などがあるようですが，ここでは '.cc' を使ってい
ます．

以下は src/base/Expr.cc の例です．同じく，先頭の数字は行番号であり，実
際の内容には含まれません．

 1 // $Source: /export/home/project/synth/cvsrepos/ymtools/docs/develop/coding-style.txt,v $
 2 // $Author: matsunaga $
 3 // $Revision: 1.1.1.1 $
 4 // $Date: 2005/12/11 17:07:20 $
 5 
 6 // 論理式を表すクラス
 7
 8 #if HAVE_CONFIG_H
 9 #include "config.h"
10 #endif
11 
12 #include "base/Expr.h"
13 #include "base/ExprNode.h"
14 #include "base/ExprParser.h"
15 
16 BEGIN_NAMESPACE_MAGUS_EXPR

1行目〜4行目: インクルードファイルと同じく CVS 用のキーワードを書いて
います．

8行目〜10行目: configure スクリプトを実行して調べたコンパイル環境を定
義したファイル "config.h" を読み込んでいます．「すべての」ソースファイ
ルでこのファイルを読み込んでください．だったら base/common.h の中でイ
ンクルードしておけばいいのに，という話がありますがある意味その通りです．
そうしていない理由は，もしかしてこの Magus の一部をライブラリ化したと
すると，ライブラリをビルドした環境とライブラリをリンクする環境が異なる
ことがあるのでライブラリをリンクするときに用いるインクルードファイル側
には config.h をインクルードさせられない，ということです．
とりあえず今は何も言わずにこのような記述を加えるようにしてください．

12行目: Magus のソースツリーの下のファイルをインクルードする場合には
src 以下のパスを書いてください．実はこの Expr.h は Expr.cc と同じディ
レクトリにあるので "Expr.h" でもいいのですがどのファイルをインクルード
しているのかわかりやすいのでこの形式の方がいいと思います．例えばいくつ
かのディレクトリに "common.h" というファイルがあるので，それらを(人間
が)区別するのに役立ちます．

16行目: 名前空間のところで書いた名前空間の開始を表すマクロです．ファイ
ルの末尾に対応する END_NAMESPACE_MAGUS_EXPR があります．これを忘れない
でください．
