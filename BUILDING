$Id: BUILDING 958 2007-08-28 05:38:02Z matsunaga $

//////////////////////////////////////////////////////////////////////
// ymtools のビルドについて
//////////////////////////////////////////////////////////////////////

これには少々複雑な手順を必要とします．大まかには次のような4つのステッ
プを踏みます． 

 1. configure スクリプトの生成
 2. autogen スクリプトの生成
 3. configure の実行(Makefileの生成)
 4. make

このうち 1 と 2 はソースをチェックアウトした時に1回だけ行う必要があり
ます．3 はソースファイルを変更したら毎回実行する必要があります．
また，コンパイルオプションを変えたり，異なる環境やコンパイラでコンパイ
ルし直すときは 2 を実行する必要があります．さらに，後述するように一つ
のソースから複数のコンパイルオプションやプラットフォームに応じたバイナ
リを生成することも可能です．


//////////////////////////////////////////////////////////////////////
// 1 configure スクリプトの生成
//////////////////////////////////////////////////////////////////////

ここでは autoconf, automake, libtool 等を用いて ymtools 直下の configure
スクリプトを生成します．これは実はだれかが一回行えば良いのでステップ1
が終わった状態で Subversion レポジトリにインポートしても良いのですが，
自動で生成されるファイルを Subversion に登録するのは無駄なので普通は登
録しません． 
で，ステップ1では autoconf, automake, libtool などを必要とするのですが，
計算機によってはインストールされていない，または古いバージョンがインス
トールされている等の問題が起る場合があります．この時はどこか適当な計算
機上でステップ1を実行してください．
現時点では以下の環境で正しく処理できることを確認しています．

 - FreeBSD 4-STABLE: autoconf2.57 + automake1.7.5 + libtool1.4.3
 - RedHat Linux 9:   autoconf2.57 + automake1.6.3 + libtool1.4.3
 - Solaris9:         autoconf2.57 + automake1.7.2 + libtool1.5

で，すべての環境において ymtools 直下で

./mk

と打ち込めばステップ1は終了です．
ここでエラーが起きるときには autoconf, automake などのバージョンを確認
してください．たとえば autoconf が autoconf2.13 で別に autoconf257 な
んていう名前で autoconf2.57 がインストールされていたら autoconf257 が
使われるように環境変数を設定してください(後述)


ステップ1で生成されたファイルを消すには

./mk clean

と打ち込んでください．

ちなみにこれらの auto-tools のバージョンを確かめたいときには

./mk debug

と打ち込んでください．各々のツールのバージョンが表示されます．それ以外
の処理は行いません．


//////////////////////////////////////////////////////////////////////
// 2 autogen スクリプトの生成
//////////////////////////////////////////////////////////////////////

ここではステップ1で生成された configure スクリプトを実行して Makefile
を生成します．ただし，「ここ」ではそれを実行しないでください．
ソースファイルのある場所でコンパイルすることも可能ですが，できればコン
パイルするディレクトリを他に用意することをお勧めします．というのはソー
スディレクトリはその後 CVS に登録することがあるので「きれいな」状態に
しておくことが望ましいからです．また，同一のソースから FreeBSD,
RedHat, Solaris などの異なるプラットフォーム用のバイナリを生成するとき
にも複数のビルド用ディレクトリを用意したほうが便利です．

で，このようにビルド用ディレクトリに Makefile を作るには 1 で生成し
た configure スクリプトを走らせればよいのですが，これもいろいろと細々
した設定オプションがあり，何度も手で修正しながら configure を走らせる
のは手間がかかるし間違いのものなので，この作業を行う autogen というス
クリプトを自動生成するようにしました．

cd $SRCDIR
./mk autogen $BUILDDIR $INSTALLDIR compile-mode

で $BUILDDIR 直下に autogen というスクリプトが生成されます．

$SRCDIR は ymtools のソースのあるディレクトリのことです．

$BUILDDIR はコンパイルされたオブジェクトコードが置かれるビルド用ディレ
クトリです．$HOME/build/ymtools とか，複数の環境でビルドするときは
$HOME/build/ymtools-freebsd-gcc3 等としておくのが良いでしょう．

$INSTALLDIR はインストール先のディレクトリです．
本来なら，ここでビルドされたプログラムやヘッダファイル，ライブラリは
/usr/{bin,include,lib} や /usr/local/{bin,include,lib} の下にインストー
ルされるので，そのような場合には $INSTALLDIR は /usr か /usr/local で
すが，プログラム開発中にはそのような場所には置かないのが普通です．
$HOME/tmp-install/ymtools というようなディレクトリを用意してそこに仮イ
ンストールすることをおすすめします．
$BUILDDIR と同様に $HOME/tmp-install/ymtools-freebsd-gcc3 のような名前
でもいいと思います．

compile-mode は今のところ opt と debug と peof のみを受け付けるように
なっています．(opt なら -O3 を debug なら -g を付けるだけ)

autogen は簡単な sh スクリプトなので中をみれば何をしているかはすぐにわ
かると思います．
また，autogen は最後に autogen.local というファイルがあればそれをイン
クルードしますので，そこに上書きしたい設定を書いておけばもともとの
autogen に手を加えずに済みます．
autogen は ./mk autogen で自動生成されるため，手で修正しても再度
./mk autogen するとその修正が消えてしまうので autogen には手を加え
ずに autogen.local に修正点を書いておく方が賢明です．
詳しくは 「A-2 autogen.local の使用例」 を読んでください．


//////////////////////////////////////////////////////////////////////
// 3 configure の実行
//////////////////////////////////////////////////////////////////////

これは簡単で $BUILDDIR において

./autogen

とするだけです．autogen スクリプトが自動的に configure を実行してくれ
ます．一回，configure を実行すると Makefile ができるので以後ソースファ
イルのMakefile.am 等を変更すると make で自動的に configure してくれる
ようになります．便利ですが，私もイマイチ完全に理解しているわけではない
ので，なんか変だなとおもったら一回，ファイルを消して configure しなお
してみてください．


//////////////////////////////////////////////////////////////////////
// 4 make の実行
//////////////////////////////////////////////////////////////////////

こちらも簡単で

cd $BUILDDIR
make

コンパイルが成功したら

make install

で $INSTALLDIR に種々のファイルをインストールします．
ちなみに $INSTALLDIR は存在していなければ新規に生成してくれるので
mkdir しておく必要はありません．
もちろん親のディレクトリに対する書き込み権限は必要です．


//////////////////////////////////////////////////////////////////////
// A-1 mk コマンドリファレンス
//////////////////////////////////////////////////////////////////////

- configure の生成
 mk

- クリーンアップ
 mk clean

- autogen スクリプトの生成

 mk autogen <build-dir> <install-dir> <compile-mode>

- 使用するコマンドのバージョン確認
 mk debug


//////////////////////////////////////////////////////////////////////
// A-2 autogen.local 使用例
//////////////////////////////////////////////////////////////////////

よくある autogen.local の使い方としては tcl/tk のインストール先の指定
や popt のインストール先の指定，マシン依存の最適化オプションの指定など
があります．

これは configure のオプションとして指定します．たとえば

--with-tcl=/foo/bar

というオプションを付加したい場合には autogen.local に

$optflags="$optflags --with-tcl=/foo/bar"

という行を追加してください．もとの $optflags の値を消してしまわないよ
うに注意してください．

まず，tcl/tk ですが，たとえば /foo/bar 以下に tcl(tk) がインストール
されているとすると /foo/bar/lib/tclConfig.sh(tkConfig.sh) というファイ
ルがあるはずです．
これが普通のディレクトリ(/usr/local とか)なら configure スクリプトが自
動的に tcl を見つけてくれるのですが，

/opt/export/lib/mytcl/tclConfig.sh

とかいう不規則な場所に tcl がインストールされていると configure が tcl
を見つけることができません．そのような場合には configure に次のような
オプションを付ける必要があります．

--with-tcl=/opt/export/lib/mytcl

tclConfig.sh はその名の通り sh スクリプトで実行することで tcl のインス
トール先のディレクトリとかリンク時のオプションとかがわかるようになって
います．通常ヘッダファイルもここからわかるのですが，もしもヘッダファイ
ルが見つからない場合には

--with-tcl-includes=<ヘッダファイルのあるディレクトリ>

を指定します．tk も同様です．

popt パッケージも似ていますが，こちらは popt.h がある場所が

/foo/bar/include/popt.h

だった場合には --with-popt-prefix=/foo/bar

と指定します．ライブラリは /foo/bar/lib の下にあると仮定します．
もしも /foo/bar/lib 以外の場所(たとえば /xxx/zzz/ の下)にあるときには

--with-popt-libdir=/xxx/zzz

と指定します．

また，以下の環境変数をセットしておくとコンパイラの設定ができます．
なければ適当なものが使われます．

CC: Cコンパイラを指定します．
CXX: C++コンパイラを指定します．
CFLAGS: Cコンパイラに渡すコンパイルオプションを指定します．
CXXFLAGS: C++コンパイラに渡すコンパイルオプションを指定します．

実は ymtools は C++ しか使ってません．
これらを autogen.local で指定するには

export CXX=g++34

の様にしてください．また，pentium4 用の最適化をしたければ

CXXFLAGS="$CXXFLAGS -march=pentium4"

の様にコンパイルオプションを追加します．


//////////////////////////////////////////////////////////////////////
// A-3 環境変数について
//////////////////////////////////////////////////////////////////////

mk は内部で使うコマンド(autoconf, automakeなど)を勝手に推測します
が，特定のバージョンや特定のパスにあるプログラムを使いたいときには環境
変数で指定することができます．以下にその環境変数とそのデフォルト値を示
します．

環境変数名        意味				デフォルト値

AUTOHEADER　　　　autoheader コマンドのパス名	autoheader(*1)
AUTOHEADER_FLAGS  autoheader のオプション	なし
AUTOCONF          autoconf コマンドのパス名	autoconf(*1)
AUTOCONF_FLAGS	  autoconf のオプション		なし
ACLOCAL           aclocal コマンドのパス名	aclocal(*1)
ACLOCAL_FLAGS     aclocal のオプション		なし
AUTOMAKE          automake コマンドのパス名	automake(*1)
AUTOMAKE_FLAGS    automake のオプション		なし
LIBTOOLIZE        libtoolize コマンドのパス名	libtoolize(*1)
LIBTOOLIZE_FLAGS  libtoolize のオプション	なし
M4                m4 コマンドのパス名		m4
FIND              find コマンドのパス名		find
RM                rm コマンドのパス名		rm

*1: FreeBSD の場合バージョンごとに autoconf259 のようなコマンド名にな
 るので自動的に最新版を使用する

ほとんどの場合 XXXX_FLAGS は指定する必要はないと思いますが，autoconf
用のマクロが通常と異なる場所に置いてある場合には AUTOHEADER_FLAGS で
"-I <そのディレクトリ>" を指定する必要があります．


//////////////////////////////////////////////////////////////////////
// B 上級編
//////////////////////////////////////////////////////////////////////

実は ymtools はライブラリ群である ymlibs と magus をはじめとするいくつ
かのアプリケーションから成り立っています(magus 以外のアプリケーション
はオマケ程度)．これらは個別に configure/make することが可能です．
また，ymlibs のなかのライブラリの個別に make するかどうかをコントロー
ルすることが可能です．


//////////////////////////////////////////////////////////////////////
// B-1 サブパッケージの configure/make
//////////////////////////////////////////////////////////////////////

ymtools のトップディレクトリで mk <subcommand> でいくつかの前処理
をおこないますが，これと同じことが以下のサブディレクトリ上の
 mk <subcommand> コマンドでおこなえます．

./ (ymtools のトップディレクトリ)
ymlibs
magus
gdsprint
led
cnfdecomp

用法は mk と全く同じです．
実際，mk は

cd ./; mk
cd ./ymlibs; mk
cd ./magus; mk
cd ./gdsprint; mk
cd ./led; mk
cd ./cnfdecomp; mk

と同義です．ただし，サブパッケージの configure ではいくつかの細かな設
定を行うことが可能です(後述)．

magus その他のアプリケーションは ymlibs のいくつかのライブラリに依存し
ているのでこれらのアプリケーションを作るためには ymlibs を作成する必要
があります．ただし，これには2通りの方法があって，同一のソースツリーに
ある ymlibs をコンパイルして使う方法と既にどこかにインストールしてある
ymlibs を使う方法があります(後述)


//////////////////////////////////////////////////////////////////////
// B-2 ymlibs の configure
//////////////////////////////////////////////////////////////////////

現在，ymlibs には以下のライブラリが含まれます．

libym_utils     汎用のユーティリティクラスライブラリ
libym_tclpp     Tcl インターフェイス
libym_verilog   Verilog フロントエンド
libym_sat       SAT パッケージ(未完)
libym_lexp      論理式を扱うクラスライブラリ
libym_blif      BLIF ファイルパーサー
libym_bnet      boolean network を扱うクラスライブラリ
libym_bdd       BDD を扱うクラスライブラリ
libym_npn       NPN 同値類判定を行うクラスライブラリ
libym_gds       GDS-II ファイルパーサー

ほとんどの場合，libym_utils は必須ですが，それ以外は不要な場合がありま
す．そこで，これらのライブラリは(libym_utilsも含めて) make するかどう
かを configure 時に選択できるようになっています．
具体的には configure のオプションとして

--enable-libym_utils もしくは
--enable-libym_utils=yes

とすれば libym_utils ライブラリは make されるようになります．
逆に作りたくない場合には

--disable-libym_utils もしくは
--enable-libym_utils=no

とすれば make されません．
デフォルトでは全てのライブラリが make されるようになっています．

これを変更するには上述のように configure のオプションをあたえればよい
のですが，mk(_all) autogen で autogen スクリプトを作って autogen を実
行する場合，その中で自動的に configure スクリプトが呼び出されてしまい
ます．そこで，autogen.local にこのオプションを書いておく必要があります．
具体的には autogen スクリプトの中の optflags というシェル変数が
configure の引数として渡されますので autogen.local で optflags の値を
設定すればよいことになります．
ただし，optflags が既に他の値をもっている場合がありますので，

optflags="$optflags --disable-libym_utils"

のように昔の値の後ろに追加するようにしてください．

ライブラリの中には他のライブラリに依存しているものがあります．依存先の
ライブラリが disable されていた場合，依存しているライブラリも自動的に
disable されます．これは configure 時のメッセージに現れるのでチェック
してください．

libym_utils の中に zlib を利用した圧縮/伸張機能付きストリームバッファ
のクラスが含まれています．しかし，どうも zlib のバージョンによってはこ
の部分がうまくコンパイルできないようなので現在は緊急避難的にこのクラス
の make を個別に on/off できるようにしています．コンパイル時に zlib 関
係で(正確には gzheaderp が undefined と言われる)エラーが起きたら
--disable-zstream を加えてください．

なお，ymlibs の下で autogen を起動した場合には ymlibs 直下の
autogen.local が用いられますが，ymtools の下で autogen を起動すると
ymtools 直下の autogen.local が用いられるので注意が必要です．
もっとも簡単な方法は ymtools 直下の autogen.local に必要な情報を全て書
いておいて ymlibs (magus その他のディレクトリも同様) 直下の
autogen.local には

if test -f ../autogen.local; then
  . ../autogen.local
fi

と親のディレクトリの autogen.local を読み込むようにしておくのが安全だ
と思われます．


//////////////////////////////////////////////////////////////////////
// B-3 magus の configure
//////////////////////////////////////////////////////////////////////

magus の configure に関しては上述の tcl/tk の場所の指定以外に ymlibs
の指定がおこなえます．

ymtools のソースツリー一式を取ってきて mk, autogen, make する場合
にはなにも指定する必要はありませんが，他の場所にインストールされている
ymlibs を用いる場合には magus の configure 時にその場所を指定する必要
があります(逆にこの場合には magus のソースツリーだけあればよい)．
方法は，configure のオプションで，

--with-ymlibs=<ymConfig.shのあるディレクトリ>

を指定します．通常は ymConfig.sh は　ymlibs のインストール先ディレクト
リを ${prefix} とすると，${prefix}/lib/ymlibsX.Y/ymConfig.sh にありま
す(X.Y はバージョン番号)．ですので，${prefix} が /usr/local で，
バージョンが 1.0 の場合，

--with-ymlibs=/usr/local/lib/ymlibs1.0

のように指定します．


//////////////////////////////////////////////////////////////////////
// B-4 tclreadline の configure
//////////////////////////////////////////////////////////////////////

tclreadline は tcl/tk の対話型シェルにおいて履歴置換や行内編集，補間な
どを可能にする tcl/tk のパッケージです．tclreadline は tclsh や wish
に対して動的にリンクすることが可能なので，ymtools/magus と独立にコンパ
イルしたパッケージを起動時に読み込んでリンクすれば使うことができますが，
tclreadline がインストールされていないシステム上で使うことを考えて
ymtools ディレクトリの下に tclreadline のソースツリーが入っています．
これをコンパイルするには ymtools の configure 時に

--enable-tclreadline

オプションを付ければOKです．実際には tclreadline のコンパイルはデフォ
ルトで on になっているので，コンパイルしたくないときだけ

--disable-tclreadline

を付けてください．

さらに，magus_shell, magus_wish に静的に tclreadline をリンクしておく
ことも可能です．これを行うには magus の configure 時に

--with-tclreadline=XXX
--with-tclreadline-include=YYYY

オプションを指定してください．実際には，ymtools のビルドツリー上に
tclreadline/libtclreadline.la があって，ソースツリー上に tclreadline.h
がある場合や ${prefix}/lib と ${prefix}/include の下に
libtclreadline.la と tclreadline.h がある場合等，自動的に tclreadline
が見付けられた場合には勝手に組み込みます．tclreadline を組み込みたくな
い場合には 

--without-tclreadline

を指定します．

--END